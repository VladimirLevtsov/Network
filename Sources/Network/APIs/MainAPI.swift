//
// MainAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class MainAPI {
    /**

     - parameter q: (query) query 
     - parameter apiKey: (query)  
     - parameter page: (query) page number (optional)
     - parameter pageSize: (query) number of items (optional)
     - parameter from: (query) from date (optional)
     - parameter to: (query) to date (optional)
     - parameter sortBy: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func everything(q: String, apiKey: String, page: Int? = nil, pageSize: Int? = nil, from: String? = nil, to: String? = nil, sortBy: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: News?,_ error: Error?) -> Void)) {
        everythingWithRequestBuilder(q: q, apiKey: apiKey, page: page, pageSize: pageSize, from: from, to: to, sortBy: sortBy).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/everything
     - parameter q: (query) query 
     - parameter apiKey: (query)  
     - parameter page: (query) page number (optional)
     - parameter pageSize: (query) number of items (optional)
     - parameter from: (query) from date (optional)
     - parameter to: (query) to date (optional)
     - parameter sortBy: (query)  (optional)
     - returns: RequestBuilder<News> 
     */
    open class func everythingWithRequestBuilder(q: String, apiKey: String, page: Int? = nil, pageSize: Int? = nil, from: String? = nil, to: String? = nil, sortBy: String? = nil) -> RequestBuilder<News> {
        let path = "/v2/everything"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "apiKey": apiKey.encodeToJSON(), 
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "sortBy": sortBy?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<News>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter country: (query) country id 
     - parameter apiKey: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func topNews(country: String, apiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: News?,_ error: Error?) -> Void)) {
        topNewsWithRequestBuilder(country: country, apiKey: apiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/top-headlines
     - parameter country: (query) country id 
     - parameter apiKey: (query)  
     - returns: RequestBuilder<News> 
     */
    open class func topNewsWithRequestBuilder(country: String, apiKey: String) -> RequestBuilder<News> {
        let path = "/v2/top-headlines"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "country": country.encodeToJSON(), 
            "apiKey": apiKey.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<News>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
